version: "3.9"

services:
  backend:
    #use dockerfile to build our image
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    # after build, use image
    image: lucky-backend-dev:latest
    # container name
    container_name: lucky-backend-dev
    # environment variables,db url, etc.
    env_file:
      - apps/api/.env.docker
    # port forwarding
    #让外界访问 API（http://localhost:3000）
    ports:
      - "${PORT}:3000"
    volumes:
      # 挂载整个仓库，内部包源码可用
      - .:/app
     # 避免宿主机空目录覆盖容器依赖
      - /app/node_modules
      - /app/apps/api/node_modules
    environment:
      # macOS/WSL 下文件监听更稳
      CHOKIDAR_USEPOLLING: "true"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -lc "yarn workspace @lucky/api prisma generate &&
              yarn workspace @lucky/api start:dev"
    networks: [app]

  db:
    image: postgres:16
    container_name: lucky-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - app

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: lucky-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}  # 登录 pgAdmin 的账号
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    #浏览器打开 http://localhost:5050
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - db
    networks:
      - app

networks:
  app:


volumes:
  db_data: